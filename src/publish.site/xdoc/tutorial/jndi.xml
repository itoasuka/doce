<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JNDI</title>
    </properties>
    <body>
        <section name="目次">
            <ul>
                <li><a href="#概要">概要</a></li>
                <li>
                    <a href="#JNDI_によるデータソースの取得">JNDI によるデータソースの取得</a>
                    <ul>
                        <li><a href="#context.xml_の作成">context.xml の作成</a></li>
                        <li><a href="#web.xml_の修正">web.xml の修正</a></li>
                        <li><a href="#JSP_の作成">JSP の作成</a></li>
                        <li><a href="#ネーミングコンテキスト">ネーミングコンテキスト</a></li>
                    </ul>
                </li>
                <li><a href="#トランザクション">トランザクション</a></li>
            </ul>
        </section>
        <section name="概要">
            <p>
                Doce には JNDI によってデータソースを取得する機能があります。Tomcat などの JNDI でデータソースを提供する機能のある Servlet
                コンテナやアプリケーションサーバ上で使用することを想定しています。
            </p>
        </section>
        <section name="JNDI によるデータソースの取得">
            <p>
                <a href="../quick_start.html">クイックスタート</a> でも使用したデータベースに Tomcat
                のデータソースを JNDI で取得してそれを通してアクセスしてみます。Tomcat
                そのもののセットアップ法や Eclipse 等での Web アプリケーションの作り方そのものについての説明はここでは割愛します。
            </p>
            <subsection name="context.xml の作成">
                <p>
                    まず、データソースを定義するため、Web アプリケーションの <code>META-INF</code> に
                    <code>context.xml</code> ファイルを以下のように作成します。
                </p>
<div class="source"><pre class="prettyprint lang-xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Context path="/TestDB">
    <Resource
        auth="Container"
        driverClassName="org.h2.Driver"
        maxActive="20"
        maxIdle="10"
        maxWait="-1"
        name="TestDB"
        username="sa"
        type="javax.sql.DataSource"
        url="jdbc:h2:tcp://localhost/~/test" />
</Context>]]></pre></div>
            </subsection>
            <subsection name="web.xml の修正">
                <p>
                    次に <code>WEB-INF/web.xml</code> の最後部に以下のように追記します。
                </p>
<div class="source"><pre class="prettyprint lang-xml"><![CDATA[    <resource-ref>
        <res-ref-name>jdbc/TestDB</res-ref-name>
        <res-type>javax.sql.dataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>]]></pre></div>
            </subsection>
            <subsection name="JSP の作成">
                <p>
                    <a href="../quick_start.html">クイックスタート</a>の起動クラスのかわりに <code>employee</code>
                    テーブルを読み込んで表示するサーブレットを作成します。
                </p>
<div class="source"><pre class="prettyprint lang-java"><![CDATA[package quickstart;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.osd.doce.DoceModule;
import jp.osd.doce.JndiProperties;
import jp.osd.doce.Transaction;

import org.seasar.doma.jdbc.dialect.H2Dialect;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;

public class MainServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    private final Object mutex = new Object();

    private transient volatile Injector injector;

    @Override
    protected void service(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {

        Employee employee;

        // トランザクションの取得
        Transaction tx = getInjector().getInstance(Transaction.class);

        // トランザクションの開始
        tx.begin();
        try {
            // APT で生成された Dao の実装クラスを取得
            EmployeeDao dao = injector.getInstance(EmployeeDaoImpl.class);

            // 主キーでエンティティを検索
            employee = dao.selectById(1);

            // トランザクションのコミット
            tx.commit();
        } finally {
            // トランザクションのロールバック
            tx.rollback();
        }

        // 出力のため JSP へフォワードする
        request.setAttribute("employee", employee);
        RequestDispatcher dispatch = request.getRequestDispatcher("output.jsp");
        dispatch.forward(request, response);
    }

    private Injector getInjector() {
        synchronized (mutex) {
            if (injector == null) {
                // JNDI から取得するデータソース名を設定
                JndiProperties jp = new JndiProperties("java:comp/env/TestDB",
                        H2Dialect.class);

                // Guice インジェクタの作成
                Module m = new DoceModule(jp);
                injector = Guice.createInjector(m);
            }
        }
        return injector;
    }
}]]></pre></div>
                <p>
                    出力用の JSP は以下のように作成します。
                </p>
<div class="source"><pre class="prettyprint lang-java"><![CDATA[<%@page import="quickstart.Employee"%>
<%@ page language="java"
         contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8" %>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Employee</title>
    </head>
    <body>
        <table>
            <tr>
                <th>employeeName</th>
                <td><%= ((Employee)request.getAttribute("employee")).employeeName %></td>
            </tr>
            <tr>
                <th>salary</th>
                <td><%= ((Employee)request.getAttribute("employee")).salary %></td>
            </tr>
        </table>
    </body>
</html>]]></pre></div>
            </subsection>
        </section>
        <section name="トランザクション">
            <p>
                Doce はトランザクションに JNDI から取得した
                <code>javax.transaction.UserTransaction</code>
                の実装を用いることが出来ます。Doce
                は、データソースが JNDI から取得された場合、<code>"java:comp/UserTransaction"</code>
                というオブジェクト名で JNDI からユーザトランザクションの取得を試みます。
            </p>
            <p>
                ユーザトランザクションを取得するためのオブジェクト名を任意に指定することもできます。
            </p>
<div class="source"><pre class="prettyprint lang-java"><![CDATA[
String dsName = "java:comp/env/TestDB";         // データソース名
String txName = "java:comp/HogeTransaction";    // トランザクション名

// JNDI から取得するデータソース名を設定
JndiProperties jp = new JndiProperties(dsName, txName);

// Guice インジェクタの作成
Module m = new DoceModule(jp);
Injector injector = Guice.createInjector(m);
]]></pre></div>
            <p>
                トランザクションのオブジェクト名を指定しなかった場合、JNDI
                によるユーザトランザクションの取得ができない場合はトランザクションの実装には
                Doma に標準で添付されている <code>LocalTransaction</code>
                が用いられます。オブジェクト名を指定してユーザトランザクションの取得ができない場合は実行時例外がスローされます。
            </p>
        </section>
        <section name="ネーミングコンテキスト">
            <p>
                Doce は JNDI によるオブジェクトの取得に使用するネーミングコンテキスト（<code>javax.naming.Context</code>）の実装に環境プロパティーなしでインスタンス化した
                <code>javax.naming.InitialContext</code> を使用します。
            </p>
            <p>
                別途、Guice モジュールで <code>javax.naming.Context</code> のバインド設定を行うことで任意のネーミングコンテキストの実装を使用することもできます。
            </p>
        </section>
    </body>
</document>
